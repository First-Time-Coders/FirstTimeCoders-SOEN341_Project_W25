name: Django CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8

    - name: Run Flake8 (Syntax Check)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        python manage.py test

    - name: Generate test cases
      run: |
        cat <<EOF > api/tests.py
        from django.test import TestCase
        from django.contrib.auth.models import User

        class APITestCase(TestCase):
            def test_account_creation(self):
                response = self.client.post('/api/register/', {"username": "testuser", "password": "password123"})
                self.assertEqual(response.status_code, 201)

            def test_channel_creation(self):
                user = User.objects.create_user(username='testuser', password='password123')
                self.client.login(username='testuser', password='password123')
                response = self.client.post('/api/create-channel/', {"name": "testchannel"})
                self.assertEqual(response.status_code, 201)

            def test_chat_message(self):
                user = User.objects.create_user(username='testuser', password='password123')
                self.client.login(username='testuser', password='password123')
                response = self.client.post('/api/send-message/', {"channel": "testchannel", "message": "Hello!"})
                self.assertEqual(response.status_code, 200)

            def test_message_deletion(self):
                user = User.objects.create_user(username='testuser', password='password123')
                self.client.login(username='testuser', password='password123')
                response = self.client.delete('/api/delete-message/', {"message_id": 1})
                self.assertEqual(response.status_code, 204)

            def test_channel_deletion(self):
                user = User.objects.create_user(username='testuser', password='password123')
                self.client.login(username='testuser', password='password123')
                response = self.client.delete('/api/delete-channel/', {"channel_id": 1})
                self.assertEqual(response.status_code, 204)

            def test_member_addition(self):
                user = User.objects.create_user(username='testuser', password='password123')
                self.client.login(username='testuser', password='password123')
                response = self.client.post('/api/add-member/', {"channel_id": 1, "username": "newuser"})
                self.assertEqual(response.status_code, 200)
        EOF
